<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:RplaceModtools.ViewModels"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:views="clr-namespace:RplaceModtools.Views"
        xmlns:rplaceModtools="clr-namespace:RplaceModtools"
        xmlns:models="clr-namespace:RplaceModtools.Models"
        xmlns:componentModel="clr-namespace:CommunityToolkit.Mvvm.ComponentModel;assembly=CommunityToolkit.Mvvm"
        mc:Ignorable="d" d:DesignWidth="1000" d:DesignHeight="600" MinWidth="400"
        x:Class="RplaceModtools.Views.MainWindow"
        Icon="/Assets/favicon.ico"
        Title="RplaceModtools"
        TransparencyLevelHint="AcrylicBlur"
        TransparencyBackgroundFallback="DarkGray"
        Background="DarkGray"
        RequestedThemeVariant="{Binding CurrentTheme}">
        <!--Background="Transparent"-->
        
    <Window.Styles>
        <Style Selector="Image.PlaceLogo">
            <Setter Property="Height" Value="100"/>
            <Setter Property="Width" Value="100"/>
            <Style.Animations>
                <Animation Delay="0:0:1" Duration="0:0:1" Easing="QuadraticEaseOut"> 
                    <KeyFrame Cue="0%">
                        <Setter Property="Height" Value="140"></Setter>
                        <Setter Property="Opacity" Value="0.0"/>
                    </KeyFrame>
                    <KeyFrame Cue="100%">
                        <Setter Property="Height" Value="100"></Setter>
                        <Setter Property="Opacity" Value="1.0"/>
                    </KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>
        <Style Selector="Label.PlaceTitle">
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="18"/>
            <Style.Animations>
                <Animation Delay="0:0:2" Duration="0:0:1.5" Easing="QuadraticEaseOut"> 
                    <KeyFrame Cue="0%">
                        <Setter Property="Opacity" Value="0.0"/>
                    </KeyFrame>
                    <KeyFrame Cue="100%">
                        <Setter Property="Opacity" Value="1.0"/>
                    </KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>
        <Style Selector="StackPanel.PlaceConfig">
            <Style.Animations>
                <Animation Delay="0:0:2" Duration="0:0:1.5" Easing="QuadraticEaseOut"> 
                    <KeyFrame Cue="0%">
                        <Setter Property="Opacity" Value="0.0"/>
                        <Setter Property="Spacing" Value="20"></Setter>
                    </KeyFrame>
                    <KeyFrame Cue="100%">
                        <Setter Property="Opacity" Value="1.0"/>
                        <Setter Property="Spacing" Value="0"></Setter>
                    </KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>
        <!-- TODO: Should use transition instead -->
        <Style Selector="Border.ToolsPanelOpen">
            <Style.Animations>
                <Animation Duration="0:0:0.5" Easing="QuadraticEaseOut" FillMode="Forward"> 
                    <KeyFrame Cue="0%"><Setter Property="Margin" Value="0"/></KeyFrame>
                    <KeyFrame Cue="100%"><Setter Property="Margin" Value="0 0 -500 0"/></KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>
        <Style Selector="Border.ToolsPanelClose">
            <Style.Animations>
                <Animation Duration="0:0:0.5" Easing="QuadraticEaseOut" FillMode="Forward"> 
                    <KeyFrame Cue="0%"><Setter Property="Margin" Value="0 0 -500 0"/> </KeyFrame>
                    <KeyFrame Cue="100%"><Setter Property="Margin" Value="0"/></KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>
        <!--Palette colour select panel styles-->
        <Style Selector="Border.DoneButton">
            <Setter Property="Background" Value="White"/>
            <Setter Property="BorderBrush" Value="#FF5500"/>
            <Setter Property="BorderThickness" Value="4"/>
            <Setter Property="CornerRadius" Value="36"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0 0 0 8"/>
            <Setter Property="Width" Value="180"/>
        </Style>
        <Style Selector="Border.PaletteColour">
            <Setter Property="Width" Value="50"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="BorderBrush" Value="LightGray"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Margin" Value="2"/>
        </Style>
        <Style Selector="Border.PaletteColour:pointerover">
            <Setter Property="BoxShadow" Value="inset 50 0 0 0 White"/>
            <Setter Property="BorderThickness" Value="0"/>
        </Style>
        <Style Selector="ListBox.StateInfo">
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="Transparent"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="FocusAdorner" Value="{x:Null}"/>
        </Style>
    </Window.Styles>

    <Window.Resources>
        <rplaceModtools:NumericSignConverter x:Key="NumericSignConverter"/>
        <rplaceModtools:HashColourConverter x:Key="HashColourConverter" />
        <rplaceModtools:ValueEqualsConverter x:Key="ValueEqualsConverter" />
        <rplaceModtools:ValueNotEqualsConverter x:Key="ValueNotEqualsConverter" />
        <rplaceModtools:AllTrueConverter x:Key="AllTrueConverter"/>
        <rplaceModtools:NotConverter x:Key="NotConverter"/>
    </Window.Resources>
    
    <Design.DataContext>
       <vm:MainWindowViewModel/>
    </Design.DataContext>
    
    <Grid ColumnDefinitions="*, Auto" x:Name="MainGrid"> <!--Height="508"-->
        <Border Grid.Column="0" Grid.ColumnSpan="2" x:Name="PlaceConfigPanel" HorizontalAlignment="Center" VerticalAlignment="Center"
                IsVisible="{Binding StartedAndConfigured, Converter={StaticResource NotConverter}}"
                Width="380" Background="White" BoxShadow="0 0 20 2 Gray" CornerRadius="10" ZIndex="8">
            <Grid RowDefinitions="*, Auto">
                <StackPanel Grid.Row="0">
                    <Image Classes="PlaceLogo" Source="../Assets/favicon.png"/>
                    <Label Classes="PlaceTitle">RplaceTK Mod Tools</Label>
                    <StackPanel Classes="PlaceConfig" Margin="10">
                        <TextBlock FontSize="24" Margin="0 0 0 5">Configuration:</TextBlock>
                        <AutoCompleteBox Watermark="Canvas websocket address" ItemsSource="{Binding KnownWebsockets}" Text="{Binding CurrentPreset.Websocket}" Margin="0 0 0 5"/>
                        <AutoCompleteBox Watermark="Place file server address" ItemsSource="{Binding KnownFileServers}" Text="{Binding CurrentPreset.FileServer}" Margin="0 0 0 5"/>
                        <Button x:Name="PresetsAdvancedButton" HorizontalAlignment="Center" Margin="4" Click="OnPresetsAdvancedClicked">Advanced â–¼</Button>
                        <StackPanel x:Name="PresetsAdvancedPanel" IsVisible="false" Spacing="5">
                            <ToggleSwitch IsChecked="{Binding CurrentPreset.LegacyServer, Mode=TwoWay}">Legacy server</ToggleSwitch>
                            <TextBox Watermark="Live canvas path" Text="{Binding CurrentPreset.PlacePath}" />
                            
                            <TextBox Watermark="Server backups repository" Text="{Binding CurrentPreset.BackupsRepository}">
                                <TextBox.IsVisible>
                                    <Binding Path="CurrentPreset.LegacyServer" Converter="{StaticResource ValueEqualsConverter}">
                                        <Binding.ConverterParameter>
                                            <x:Boolean>True</x:Boolean>
                                        </Binding.ConverterParameter>
                                    </Binding>
                                </TextBox.IsVisible>
                            </TextBox>
                            <TextBox Watermark="Backups repository main branch" Text="{Binding CurrentPreset.MainBranch}">
                                <TextBox.IsVisible>
                                    <Binding Path="CurrentPreset.LegacyServer" Converter="{StaticResource ValueEqualsConverter}">
                                        <Binding.ConverterParameter>
                                            <x:Boolean>True</x:Boolean>
                                        </Binding.ConverterParameter>
                                    </Binding>
                                </TextBox.IsVisible>
                            </TextBox>
                            <TextBox Watermark="Server backup list path" Text="{Binding CurrentPreset.BackupListPath}">
                                <TextBox.IsVisible>
                                    <Binding Path="CurrentPreset.LegacyServer" Converter="{StaticResource ValueEqualsConverter}">
                                        <Binding.ConverterParameter>
                                            <x:Boolean>False</x:Boolean>
                                        </Binding.ConverterParameter>
                                    </Binding>
                                </TextBox.IsVisible>
                            </TextBox>
                            <TextBox Watermark="Server backups directory path" Text="{Binding CurrentPreset.BackupsPath}">
                                <TextBox.IsVisible>
                                    <Binding Path="CurrentPreset.LegacyServer" Converter="{StaticResource ValueEqualsConverter}">
                                        <Binding.ConverterParameter>
                                            <x:Boolean>False</x:Boolean>
                                        </Binding.ConverterParameter>
                                    </Binding>
                                </TextBox.IsVisible>
                            </TextBox>
                        </StackPanel>
                        <TextBlock FontSize="18" Margin="0 0 0 5">Client</TextBlock>
                        <TextBox x:Name="ConfigAdminKeyInput" RevealPassword="False" PasswordChar="*" Watermark="Admin key" Text="{Binding CurrentPreset.AdminKey}" Margin="0 0 0 5"/>
                        <TextBox Watermark="Live chat username" Text="{Binding CurrentPreset.ChatUsername}" Margin="0 0 0 5"/>
                        <ScrollViewer>
                            <ListBox ItemsSource="{Binding ServerPresets}" SelectedItem="{Binding CurrentPreset}">
                                <ListBox.Styles>
                                    <Style Selector="ListBox">
                                        <Setter Property="Background" Value="Transparent"></Setter>
                                    </Style>
                                    <Style Selector="ListBoxItem">
                                        <Style.Animations>
                                            <Animation Delay="0:0:3" Duration="0:0:2" Easing="QuadraticEaseOut"> 
                                                <KeyFrame Cue="0%">
                                                    <Setter Property="Opacity" Value="0.0"/>
                                                </KeyFrame>
                                                <KeyFrame Cue="100%">
                                                    <Setter Property="Opacity" Value="1.0"/>
                                                </KeyFrame>
                                            </Animation>
                                        </Style.Animations>
                                        <Setter Property="Padding" Value="4" />
                                        <Setter Property="MinWidth" Value="72"/>
                                        <Setter Property="MinHeight" Value="72"/>
                                        <Setter Property="Margin" Value="2"/>
                                        <Setter Property="CornerRadius" Value="4"/>
                                        <Setter Property="Background" Value="{DynamicResource ButtonBackground}"/>
                                    </Style>
                                    <Style Selector="TextBlock.ServerPresetHeader">
                                        <Setter Property="FontSize" Value="36" />
                                        <Setter Property="TextAlignment" Value="Center" />
                                        <Setter Property="Canvas.Left" Value="0" />
                                    </Style>
                                    <Style Selector="TextBlock.ServerPresetHeader:pointerover">
                                        <Setter Property="Canvas.Left" Value="{Binding RelativeSource={RelativeSource Self}, Path=DesiredSize.Width, Converter={StaticResource NumericSignConverter}}" />
                                    </Style>
                                </ListBox.Styles>
                                <ListBox.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <UniformGrid Rows="2" Columns="4" />
                                    </ItemsPanelTemplate>
                                </ListBox.ItemsPanel>
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <StackPanel>
                                            <Canvas>
                                                <TextBlock Classes="ServerPresetHeader" Text="{Binding Websocket}">
                                                    <TextBlock.Transitions>
                                                        <Transitions>
                                                            <DoubleTransition Property="Canvas.Left" Duration="0:0:6"/>
                                                        </Transitions>
                                                    </TextBlock.Transitions>
                                                </TextBlock>
                                            </Canvas>
                                            <TextBlock Padding="0 36 0 0" Text="{Binding AdminKey}" />
                                        </StackPanel>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </ScrollViewer>
                    </StackPanel>
                </StackPanel>
                <Button Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Bottom" CornerRadius="5" Padding="40 10 40 10" Margin="5" Command="{Binding StartCommand}">Start</Button>
            </Grid>
        </Border>

        <Border Grid.Column="0" Grid.ColumnSpan="2" x:Name="ActionConfigPanel" IsVisible="False" HorizontalAlignment="Center" VerticalAlignment="Center" Width="380" Background="White" BorderBrush="Gray" BorderThickness="1" CornerRadius="8" ZIndex="8">
            <StackPanel Margin="8" Spacing="4">
                <TextBlock FontSize="24">Manage user:</TextBlock>
                <TextBox Text="{Binding CurrentModerationUid}"
                    IsVisible="{Binding CurrentModerationAll,
                        Converter={StaticResource NotConverter}}" Watermark="Player uid"></TextBox>
                
                <ToggleSwitch IsVisible="{Binding CurrentModerationAction,
                    Converter={StaticResource ValueEqualsConverter},
                    ConverterParameter = {x:Static rplaceModtools:ModerationAction.Captcha}, Mode=TwoWay}"
                    IsChecked="{Binding CurrentModerationAll}">
                    <!-- Long story
                    <ToggleSwitch.IsChecked>
                        <MultiBinding Converter="{StaticResource AllTrueConverter}">
                            <Binding Path="CurrentModerationAll" />
                            <Binding Path="CurrentModerationAction"
                                     Mode="OneWay"
                                     Converter="{StaticResource ValueEqualsConverter}"
                                     ConverterParameter="{x:Static rplaceModtools:ModerationAction.Captcha}" />
                        </MultiBinding>
                    </ToggleSwitch.IsChecked>
                    -->
                    All clients
                </ToggleSwitch>
                <StackPanel>
                    <TextBlock FontWeight="Bold">Action:</TextBlock>
                    <RadioButton IsChecked="{Binding CurrentModerationAction,
                            Converter={StaticResource ValueEqualsConverter},
                            ConverterParameter={x:Static rplaceModtools:ModerationAction.Kick}}"
                        >Kick</RadioButton>
                    <RadioButton IsChecked="{Binding CurrentModerationAction,
                            Converter={StaticResource ValueEqualsConverter},
                            ConverterParameter = {x:Static rplaceModtools:ModerationAction.Mute}}"
                        >Mute</RadioButton>
                    <RadioButton IsChecked="{Binding CurrentModerationAction,
                            Converter={StaticResource ValueEqualsConverter},
                            ConverterParameter = {x:Static rplaceModtools:ModerationAction.Ban}}"
                        >Ban</RadioButton>
                    <RadioButton IsChecked="{Binding CurrentModerationAction,
                            Converter={StaticResource ValueEqualsConverter},
                            ConverterParameter = {x:Static rplaceModtools:ModerationAction.Captcha}}"
                        >Captcha solve</RadioButton>
                </StackPanel>
                <StackPanel>
                    <StackPanel.IsVisible>
                        <MultiBinding Converter="{StaticResource AllTrueConverter}">
                            <Binding Path="CurrentModerationAction"
                                 Converter="{StaticResource ValueNotEqualsConverter}"
                                 ConverterParameter="{x:Static rplaceModtools:ModerationAction.Kick}">
                            </Binding>
                            <Binding Path="CurrentModerationAction"
                                     Converter="{StaticResource ValueNotEqualsConverter}"
                                     ConverterParameter="{x:Static rplaceModtools:ModerationAction.Captcha}">
                            </Binding>
                        </MultiBinding>
                    </StackPanel.IsVisible>
                    <TextBlock FontWeight="Bold">Duration (hours, minutes):</TextBlock>
                    <TimePicker SelectedTime="{Binding CurrentModerationDuration}"></TimePicker>
                </StackPanel>
                <StackPanel>
                    <TextBlock FontWeight="Bold">Reason:</TextBlock>
                    <TextBox Watermark="Explanation*" MaxLength="300" Text="{Binding CurrentModerationReason}"></TextBox>
                </StackPanel>
                <Border Padding="8" Margin="4" CornerRadius="4">
                    <Border.Background>
                        <SolidColorBrush Color="Gray" Opacity="0.5" />
                    </Border.Background>
                    
                    <TextBlock FontStyle="Italic" TextWrapping="Wrap" Foreground="Yellow">âš  All moderation actions are logged by the server and reports sent to all other staff. Follow the moderation rules. Do not abuse power.</TextBlock>
                </Border>
                <Grid ColumnDefinitions="* 16 *">
                    <Button Grid.Column="0" HorizontalAlignment="Stretch" Click="OnActionConfigSubmitPressed">Submit</Button>
                    <Button Grid.Column="2" HorizontalAlignment="Stretch" Click="OnActionConfigCancelPressed">Cancel</Button>
                </Grid>
            </StackPanel>
        </Border>

        <Panel Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" x:Name="CanvasBackground">
            <Panel.Background><SolidColorBrush Opacity="0.8" Color="White" /></Panel.Background>
            <views:SkCanvas x:Name="Board" Board="{Binding Board}" Changes="{Binding Changes}"
                SelectionBoard="{Binding SelectionBoard}" CanvasWidth="{Binding CanvasWidth}"
                CanvasHeight="{Binding CanvasHeight}" />
            
            <Canvas VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                <Border x:Name="CursorIndicatorRectangle" IsVisible="False" BorderBrush="Gray" CornerRadius="2" BorderThickness="1" Background="Transparent" Height="16" Width="16" Opacity="1"/>
            </Canvas>
            
            <!--Change this border into just the listbox, put the border around each element-->
            <ListBox Classes="StateInfo" ItemsSource="{Binding StateInfos}"
                     SelectedItem="{Binding SelectedStateInfo}" VerticalAlignment="Top"
                     HorizontalAlignment="Right" Margin="16">
                <ListBox.Styles>
                    <Style Selector="ListBoxItem">
                        <Setter Property="Border.CornerRadius" Value="8"/>
                        <Setter Property="Margin" Value="4"/>
                        <Setter Property="Background">
                            <Setter.Value>
                                <SolidColorBrush Color="Gray" Opacity="0.5" />
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style Selector="ListBoxItem:selected">
                        <Setter Property="Border.CornerRadius" Value="8"/>
                        <Setter Property="Margin" Value="4"/>
                    </Style>
                    <Style Selector="ListBoxItem:pointerover">
                        <Setter Property="Border.CornerRadius" Value="8"/>
                        <Setter Property="Margin" Value="4"/>
                        <Setter Property="Background">
                            <Setter.Value>
                                <SolidColorBrush Color="Gray" Opacity="0.8" />
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListBox.Styles>
            </ListBox>
            
            <Button ZIndex="3" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="10" Padding="10" Click="OnSelectColourClicked">Select Colour</Button>
            <DockPanel ZIndex="8" Dock="Bottom" Height="150" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Background="White" IsVisible="False" x:Name="Palette">
                <Grid RowDefinitions="* Auto">
                    <ScrollViewer Grid.Row="0">
                        <ListBox x:Name="PaletteListBox" ItemsSource="{Binding AvColours}" HorizontalAlignment="Stretch" VerticalAlignment="Top" SelectedIndex="{Binding CurrentColour}" Background="Transparent">
                            <ListBox.DataContext><vm:PaletteViewModel/></ListBox.DataContext>
                            <ListBox.Styles>
                                <Style Selector="ListBoxItem">
                                    <Setter Property="Padding" Value="0" />
                                </Style>
                            </ListBox.Styles>
                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate> 
                                    <WrapPanel x:Name="PalettePanel" Orientation="Horizontal" Margin="10 16 10 0"/>
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Border Classes="PaletteColour" Background="{Binding}"/>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </ScrollViewer>
                    <Border Grid.Row="1" Classes="DoneButton">
                        <Button Padding="8" HorizontalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" CornerRadius="36" Background="Transparent" Click="OnPaletteDoneButtonClicked">Done</Button>
                    </Border>
                </Grid>
            </DockPanel>
        </Panel>
        <Border Grid.Column="1" x:Name="ToolsPanel" BorderBrush="Black" Padding="10" BoxShadow="0 0 10 2 Gray" Width="300" Background="White">
            <TabControl Margin="0" Padding="0">
                <TabItem Header="Tools">
                    <ScrollViewer>
                        <StackPanel>
                            <TextBlock FontSize="18">Canvas:</TextBlock>
                            <AutoCompleteBox Margin="5" Watermark="Switch canvas/server" ItemsSource="{Binding KnownWebsockets}" IsEnabled="False"/>
                            <ComboBox Margin="5" SelectedItem="{Binding CurrentBackup}" ItemsSource="{Binding Backups}" x:Name="CanvasDropdown">
                                <ComboBox.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <VirtualizingStackPanel></VirtualizingStackPanel>
                                    </ItemsPanelTemplate>
                                </ComboBox.ItemsPanel>
                                <ToolTip.Tip>Select a previous backup of the canvas for viewing and rollback.</ToolTip.Tip>
                            </ComboBox>
                            <Panel Margin="5 0 5 0">
                                <Image x:Name="PreviewImg" Source="../Assets/preview_default.png" RenderOptions.BitmapInterpolationMode="None"/>
                                    <Grid ColumnDefinitions="Auto, Auto, *" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Background="White">
                                        <Button Grid.Column="0" Margin="4" Command="{Binding NextBackupCommand}">Previous</Button>
                                        <Button Grid.Column="1" Margin="4" Command="{Binding PreviousBackupCommand}">Next</Button>
                                        <Button Grid.Column="2" x:Name="DownloadBtn" IsEnabled="{Binding StartedAndConfigured}" HorizontalAlignment="Right" Margin="4" Click="OnDownloadPreviewPressed">Download</Button>
                                    </Grid>
                            </Panel>
                            <TextBlock FontSize="18">Tool modes:</TextBlock>
                            <Grid Margin="5" RowDefinitions="*, *" ColumnDefinitions="*, *">
                                <ToggleButton x:Name="PaintTool" Command="{Binding SelectPaintToolCommand}" 
                                              IsChecked="{Binding CurrentTool,
                                                  Converter={StaticResource ValueEqualsConverter},
                                                  ConverterParameter={x:Static models:Tool.PaintBrush}}"
                                              Grid.Row="0" Grid.Column="0" HorizontalAlignment="Stretch" Margin="0 0 5 0">
                                    <ToolTip.Tip>Easily and quickly perform drawing operations upon the canvas.</ToolTip.Tip>Paintbrush
                                </ToggleButton>
                                <ToggleButton IsEnabled="False" x:Name="RubberTool" Command="{Binding SelectRubberToolCommand}"
                                              IsChecked="{Binding CurrentTool,
                                                  Converter={StaticResource ValueEqualsConverter},
                                                  ConverterParameter={x:Static models:Tool.Rubber}}"
                                              Grid.Row="0" Grid.Column="1" HorizontalAlignment="Stretch" Margin="5 0 0 0">
                                    <ToolTip.Tip>Erase areas of drawings with the paintbrush tool to the the canvas original state.</ToolTip.Tip>Rubber
                                </ToggleButton>
                                <ToggleButton x:Name="SelectTool" Command="{Binding SelectSelectionToolCommand}"
                                              IsChecked="{Binding CurrentTool,
                                                  Converter={StaticResource ValueEqualsConverter},
                                                  ConverterParameter={x:Static models:Tool.Select}}"
                                              Grid.Row="1" Grid.Column="0" HorizontalAlignment="Stretch" Margin="0 5 5 0">
                                    <ToolTip.Tip>Select an area of the canvas to view for rollback, or perform modifications on.</ToolTip.Tip>Select tool
                                </ToggleButton>
                                <ToggleButton x:Name="MacroTool" IsEnabled="False" Grid.Row="1" Grid.Column="1"
                                              IsChecked="{Binding CurrentTool,
                                                  Converter={StaticResource ValueEqualsConverter},
                                                  ConverterParameter={x:Static models:Tool.Macro}}"
                                              HorizontalAlignment="Stretch" Margin="5 5 0 0">
                                    <ToolTip.Tip>Automate canvas moderation actions with small scripts.</ToolTip.Tip>Macro Execution
                                </ToggleButton>
                            </Grid>
                            <ToggleSwitch x:Name="ViewSelectedBackup"
                                IsChecked="{Binding ViewSelectedBackupArea}"
                                Command="{Binding ViewSelectedBackupCommand}"
                                Margin="5">
                                <ToolTip.Tip>
                                    By turning this on, instead of viewing the whole canvas as the backup, only the area
                                    within your selection would peek through to the backup, allowing for easier visualisations
                                    of your rollback.
                                </ToolTip.Tip>
                                View selected area at backup
                            </ToggleSwitch>
                            <Grid ColumnDefinitions="* Auto">
                                <Button Grid.Column="0" Margin="5" HorizontalAlignment="Stretch" Click="OnRollbackButtonClicked">
                                    <ToolTip.Tip>Revert the selected area of the canvas to a previous date.</ToolTip.Tip>Rollback selected area
                                </Button>
                                <Button Grid.Column="1" Margin="5" HorizontalAlignment="Stretch" Click="OnLoadLocalClicked">
                                    <ToolTip.Tip>Load a place file from your local device for rollback</ToolTip.Tip>ðŸ“‚
                                </Button>
                            </Grid>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="Live chat">
                    <Grid x:Name="LiveChatGridContainer" RowDefinitions="* Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid.DataContext><vm:LiveChatViewModel></vm:LiveChatViewModel></Grid.DataContext>
                        <TabControl x:Name="LiveChatTabs" Grid.Row="0"  ItemsSource="{Binding Channels}" SelectedItem="{Binding CurrentChannel}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <TabControl.ItemTemplate> <!-- Header -->
                                <DataTemplate>
                                    <TextBlock Text="{Binding ChannelName}" />
                                </DataTemplate>
                            </TabControl.ItemTemplate>
                            <TabControl.DataTemplates> <!-- Contents -->
                                <DataTemplate DataType="{x:Type vm:LiveChatChannelViewModel}">
                                    <ListBox ItemsSource="{Binding Messages}"
                                             Background="Transparent">
                                        <ListBox.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <VirtualizingStackPanel></VirtualizingStackPanel>
                                            </ItemsPanelTemplate>
                                        </ListBox.ItemsPanel>
                                        <ListBox.ItemTemplate>
                                            <DataTemplate DataType="{x:Type models:ChatMessage}">
                                                <TextBlock TextWrapping="Wrap">
                                                    <TextBlock.ContextMenu>
                                                        <ContextMenu>
                                                            <MenuItem IsVisible="{Binding Uid,
                                                            Converter={x:Static ObjectConverters.IsNotNull}}"
                                                                      Header="{Binding Uid, StringFormat='Chatter ID: {0}'}"></MenuItem>
                                                            <MenuItem IsVisible="{Binding Uid,
                                                            Converter={x:Static ObjectConverters.IsNotNull}}"
                                                                      PointerPressed="OnKickChatterPressed"
                                                                      Header="{Binding Name, StringFormat='Kick {0}'}" />
                                                            <MenuItem IsVisible="{Binding Uid,
                                                            Converter={x:Static ObjectConverters.IsNotNull}}" PointerPressed="OnMuteChatterPressed"
                                                                      Header="{Binding Name, StringFormat='Mute {0}'}" />
                                                            <MenuItem IsEnabled="False" IsVisible="{Binding Uid,
                                                            Converter={x:Static ObjectConverters.IsNotNull}}"
                                                                      PointerPressed="OnBanChatterPressed" Header="{Binding Name, StringFormat='Ban {0}'}" />
                                                        </ContextMenu>
                                                    </TextBlock.ContextMenu>

                                                    <Run FontWeight="Bold" Foreground="{Binding Path=Name, Converter={StaticResource HashColourConverter}}" Text="{Binding Path=Name}" />
                                                    <Run Text="{Binding Path=Message}" />
                                                </TextBlock>
                                            </DataTemplate>
                                        </ListBox.ItemTemplate>
                                    </ListBox>
                                </DataTemplate>
                            </TabControl.DataTemplates>
                        </TabControl>                 
                        <Grid Grid.Row="1" ColumnDefinitions="*, 4, Auto">
                            <TextBox Grid.Column="0" x:Name="ChatInput" Watermark="Enter a message..." KeyDown="OnChatInputKeyDown"></TextBox>
                            <Button Grid.Column="2" VerticalAlignment="Stretch" Click="OnChatSendPressed">Send</Button>
                        </Grid>
                    </Grid>
                </TabItem>
            </TabControl>
        </Border>
        <Canvas Grid.Column="0">
            <Button Canvas.Top="10" Canvas.Left="10" FontSize="16" Content="...">
                <Button.Flyout>
                    <MenuFlyout Placement="Bottom">
                        <MenuItem Header="Settings">
                            <MenuItem Header="Enable cache place files" IsEnabled="False"/>
                            <MenuItem Header="Toggle dark mode" Command="{Binding ToggleThemeCommand}"/>
                            <MenuItem Header="Toggle backup check interval" IsEnabled="False"/>
                            <MenuItem Header="Reset canvas view" Click="OnResetCanvasViewPressed"/>
                        </MenuItem>
                        <MenuItem Header="See application logs" IsEnabled="False"/>
                        <MenuItem Header="Check for updates" IsEnabled="False"/>
                        <MenuItem Header="Moderate user" PointerPressed="OnModerateUserPressed"/>
                        <MenuItem Header="About">
                            <TextBlock>
                                    Rplace modtools 
                                    Copyright (C) 2023 Zekiah-A

                                    This program is free software: you can redistribute it and/or modify
                                    it under the terms of the GNU General Public License as published by
                                    the Free Software Foundation, either version 3 of the License, or
                                    (at your option) any later version.

                                    This program is distributed in the hope that it will be useful,
                                    but WITHOUT ANY WARRANTY; without even the implied warranty of
                                    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                    GNU General Public License for more details.

                                    You should have received a copy of the GNU General Public License
                                    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;
                            </TextBlock>
                            <MenuItem Header="..ps: thanks Starlk for teaching me how to Avalonia."/>
                        </MenuItem>
                        <MenuItem Header="Github" Click="OnOpenGithubClicked"/>
                    </MenuFlyout>
                </Button.Flyout>
            </Button>
        </Canvas>
    </Grid>
</Window>
